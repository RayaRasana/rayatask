// src/Calendar.tsx
import {
  defaultTimePickerTheme,
  TimePicker
} from "@react-shamsi/timepicker";

// ../../node_modules/@tabler/icons/icons-react/dist/index.esm.js
import * as e from "react";
function t() {
  return t = Object.assign ? Object.assign.bind() : function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var o2 = arguments[t2];
      for (var r in o2)
        Object.prototype.hasOwnProperty.call(o2, r) && (e2[r] = o2[r]);
    }
    return e2;
  }, t.apply(this, arguments);
}
function o(e2, t2) {
  if (null == e2)
    return {};
  var o2, r, n = function(e3, t3) {
    if (null == e3)
      return {};
    var o3, r2, n2 = {}, l2 = Object.keys(e3);
    for (r2 = 0; r2 < l2.length; r2++)
      o3 = l2[r2], t3.indexOf(o3) >= 0 || (n2[o3] = e3[o3]);
    return n2;
  }(e2, t2);
  if (Object.getOwnPropertySymbols) {
    var l = Object.getOwnPropertySymbols(e2);
    for (r = 0; r < l.length; r++)
      o2 = l[r], t2.indexOf(o2) >= 0 || Object.prototype.propertyIsEnumerable.call(e2, o2) && (n[o2] = e2[o2]);
  }
  return n;
}
var jy = ["size", "color", "stroke"];
function By(r) {
  var n = r.size, l = void 0 === n ? 24 : n, i = r.color, a = void 0 === i ? "currentColor" : i, c = r.stroke, s = void 0 === c ? 2 : c, h = o(r, jy);
  return e.createElement("svg", t({ xmlns: "http://www.w3.org/2000/svg", className: "icon icon-tabler icon-tabler-calendar", width: l, height: l, viewBox: "0 0 24 24", strokeWidth: s, stroke: a, fill: "none", strokeLinecap: "round", strokeLinejoin: "round" }, h), e.createElement("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), e.createElement("rect", { x: 4, y: 5, width: 16, height: 16, rx: 2 }), e.createElement("line", { x1: 16, y1: 3, x2: 16, y2: 7 }), e.createElement("line", { x1: 8, y1: 3, x2: 8, y2: 7 }), e.createElement("line", { x1: 4, y1: 11, x2: 20, y2: 11 }), e.createElement("line", { x1: 11, y1: 15, x2: 12, y2: 15 }), e.createElement("line", { x1: 12, y1: 15, x2: 12, y2: 18 }));
}
var vH = ["size", "color", "stroke"];
function mH(r) {
  var n = r.size, l = void 0 === n ? 24 : n, i = r.color, a = void 0 === i ? "currentColor" : i, c = r.stroke, s = void 0 === c ? 2 : c, h = o(r, vH);
  return e.createElement("svg", t({ xmlns: "http://www.w3.org/2000/svg", className: "icon icon-tabler icon-tabler-chevron-left", width: l, height: l, viewBox: "0 0 24 24", strokeWidth: s, stroke: a, fill: "none", strokeLinecap: "round", strokeLinejoin: "round" }, h), e.createElement("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), e.createElement("polyline", { points: "15 6 9 12 15 18" }));
}
var kH = ["size", "color", "stroke"];
function wH(r) {
  var n = r.size, l = void 0 === n ? 24 : n, i = r.color, a = void 0 === i ? "currentColor" : i, c = r.stroke, s = void 0 === c ? 2 : c, h = o(r, kH);
  return e.createElement("svg", t({ xmlns: "http://www.w3.org/2000/svg", className: "icon icon-tabler icon-tabler-chevron-right", width: l, height: l, viewBox: "0 0 24 24", strokeWidth: s, stroke: a, fill: "none", strokeLinecap: "round", strokeLinejoin: "round" }, h), e.createElement("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), e.createElement("polyline", { points: "9 6 15 12 9 18" }));
}
var YO = ["size", "color", "stroke"];
function ZO(r) {
  var n = r.size, l = void 0 === n ? 24 : n, i = r.color, a = void 0 === i ? "currentColor" : i, c = r.stroke, s = void 0 === c ? 2 : c, h = o(r, YO);
  return e.createElement("svg", t({ xmlns: "http://www.w3.org/2000/svg", className: "icon icon-tabler icon-tabler-clock", width: l, height: l, viewBox: "0 0 24 24", strokeWidth: s, stroke: a, fill: "none", strokeLinecap: "round", strokeLinejoin: "round" }, h), e.createElement("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), e.createElement("circle", { cx: 12, cy: 12, r: 9 }), e.createElement("polyline", { points: "12 7 12 12 15 15" }));
}

// src/Calendar.tsx
import classNames6 from "classnames";
import {
  addMonths,
  format as format2,
  getMonth as getMonth3,
  setMonth,
  setYear,
  subMonths
} from "date-fns-jalali";
import { convertDigits as convertDigits4 } from "persian-helpers";
import { forwardRef, useEffect as useEffect3, useMemo as useMemo4, useRef as useRef2, useState as useState4 } from "react";
import { SwitchTransition, Transition } from "react-transition-group";

// src/Footer.tsx
import classNames from "classnames";
import { jsx, jsxs } from "react/jsx-runtime";
var Footer = ({
  themeClasses,
  onCancel,
  mode,
  onChangeMode,
  onConfirm,
  showTimePicker
}) => {
  return /* @__PURE__ */ jsxs("div", {
    style: {
      color: themeClasses.footerButtonColor,
      backgroundColor: themeClasses.footerBackgroundColor
    },
    className: classNames("w-full p-6 flex items-center"),
    children: [
      /* @__PURE__ */ jsx("button", {
        type: "button",
        onClick: onConfirm,
        className: "ml-6",
        children: "\u062A\u0627\u06CC\u06CC\u062F"
      }),
      /* @__PURE__ */ jsx("button", {
        type: "button",
        onClick: onCancel,
        children: "\u0627\u0646\u0635\u0631\u0627\u0641"
      }),
      showTimePicker && /* @__PURE__ */ jsx("button", {
        type: "button",
        className: "mr-auto",
        onClick: () => onChangeMode == null ? void 0 : onChangeMode(mode === "date" ? "time" : "date"),
        children: mode === "date" ? /* @__PURE__ */ jsx(ZO, {
          className: "w-5 h-5"
        }) : /* @__PURE__ */ jsx(By, {
          className: "w-5 h-5"
        })
      })
    ]
  });
};
var Footer_default = Footer;

// src/Header.tsx
import classNames2 from "classnames";
import { format, getDate, getMonth, isToday } from "date-fns-jalali";
import { convertDigits } from "persian-helpers";
import { useMemo } from "react";
import { Fragment, jsx as jsx2, jsxs as jsxs2 } from "react/jsx-runtime";
var Header = ({
  activeDate,
  onGoToToday,
  showGoToToday,
  selectedDate,
  months,
  themeClasses,
  range
}) => {
  const isRanged = useMemo(() => !!range, [range]);
  const activeDateToJalali = useMemo(
    () => ({
      day: convertDigits(getDate(activeDate)),
      dayOfWeek: format(activeDate, "EEEE")
    }),
    [activeDate]
  );
  return /* @__PURE__ */ jsxs2("div", {
    style: {
      color: themeClasses.headerTextColor,
      backgroundColor: themeClasses.headerBackgroundColor
    },
    className: classNames2(
      "w-full px-4 flex items-center relative",
      isRanged ? "py-12" : "py-6"
    ),
    children: [
      isRanged && /* @__PURE__ */ jsxs2(Fragment, {
        children: [
          /* @__PURE__ */ jsx2("div", {
            className: "w-1/2 h-full absolute left-0 top-0 bg-black/20 z-50 text-center flex items-center justify-center",
            children: (range == null ? void 0 : range.to) ? /* @__PURE__ */ jsxs2("div", {
              className: "flex items-center space-x-2 space-x-reverse",
              children: [
                /* @__PURE__ */ jsx2("h1", {
                  className: "text-5xl font-bold ml-2",
                  children: convertDigits(getDate(range.to))
                }),
                /* @__PURE__ */ jsx2("h2", {
                  className: "text-xl",
                  children: months[getMonth(range == null ? void 0 : range.to)]
                })
              ]
            }) : /* @__PURE__ */ jsx2("h1", {
              className: "text-5xl font-bold opacity-30 pointer-events-none select-none",
              children: "\u067E\u0627\u06CC\u0627\u0646"
            })
          }),
          /* @__PURE__ */ jsx2("div", {
            className: "absolute w-1/2 h-full right-0 text-center flex items-center justify-center",
            children: (range == null ? void 0 : range.from) ? /* @__PURE__ */ jsxs2("div", {
              className: "flex items-center space-x-2 space-x-reverse",
              children: [
                /* @__PURE__ */ jsx2("h1", {
                  className: "text-5xl font-bold ml-2",
                  children: convertDigits(getDate(range.from))
                }),
                /* @__PURE__ */ jsx2("h2", {
                  className: "text-xl",
                  children: months[getMonth(range == null ? void 0 : range.from)]
                })
              ]
            }) : /* @__PURE__ */ jsx2("h1", {
              className: "text-5xl font-bold opacity-30 pointer-events-none select-none",
              children: "\u0634\u0631\u0648\u0639"
            })
          })
        ]
      }),
      !isRanged && /* @__PURE__ */ jsxs2(Fragment, {
        children: [
          /* @__PURE__ */ jsx2("h1", {
            className: "text-5xl font-bold ml-2",
            children: activeDateToJalali == null ? void 0 : activeDateToJalali.day
          }),
          /* @__PURE__ */ jsxs2("h2", {
            className: "text-base",
            children: [
              months[getMonth(activeDate)],
              "\u060C ",
              activeDateToJalali == null ? void 0 : activeDateToJalali.dayOfWeek
            ]
          })
        ]
      }),
      !isRanged && showGoToToday && !isToday(selectedDate) && /* @__PURE__ */ jsx2("button", {
        type: "button",
        onClick: onGoToToday,
        className: "px-4 py-2 rounded-md bg-white text-black mr-auto text-sm",
        children: "\u0628\u0631\u0648 \u0628\u0647 \u0627\u0645\u0631\u0648\u0632"
      })
    ]
  });
};
var Header_default = Header;

// src/MainBody.tsx
import classNames3 from "classnames";
import {
  getDate as getDate2,
  isAfter,
  isBefore,
  isFriday,
  isSameDay,
  isSameMonth,
  isSaturday,
  isToday as isToday2
} from "date-fns-jalali";
import { convertDigits as convertDigits2 } from "persian-helpers";
import { useMemo as useMemo2, useState as useState2 } from "react";

// src/utils/getDates.ts
import {
  addDays,
  endOfMonth,
  endOfWeek,
  startOfMonth,
  startOfWeek
} from "date-fns-jalali";
var getDates = (activeDate) => {
  const startOfTheSelectedMonth = startOfMonth(activeDate);
  const endOfTheSelectedMonth = endOfMonth(activeDate);
  const startDate = startOfWeek(startOfTheSelectedMonth);
  const endDate = endOfWeek(endOfTheSelectedMonth);
  let currentDate = startDate;
  const days = [];
  while (currentDate <= endDate) {
    days.push(currentDate);
    currentDate = addDays(currentDate, 1);
  }
  return days;
};

// src/utils/useDebounce.ts
import { useEffect, useState } from "react";
var useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(
    () => {
      const handler = setTimeout(() => {
        setDebouncedValue(value);
      }, delay);
      return () => {
        clearTimeout(handler);
      };
    },
    [value, delay]
  );
  return debouncedValue;
};

// src/MainBody.tsx
import { Fragment as Fragment2, jsx as jsx3, jsxs as jsxs3 } from "react/jsx-runtime";
var daysOfTheWeek = [
  "\u0634\u0646\u0628\u0647",
  "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647",
  "\u062F\u0648\u0634\u0646\u0628\u0647",
  "\u0633\u0647\u200C\u0634\u0646\u0628\u0647",
  "\u0686\u0647\u0627\u0631\u200C\u0634\u0646\u0628\u0647",
  "\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647",
  "\u062C\u0645\u0639\u0647"
];
var isDateInRange = (from, to, day) => {
  if (day <= to && day >= from) {
    return true;
  }
  return false;
};
var hexToRgb = (hex) => {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : { r: 0, g: 0, b: 0 };
};
var MainBody = ({
  maxDate,
  minDate,
  onActiveDayChange,
  highlightToday,
  disabledDates,
  themeClasses,
  activeDate,
  selectedDate,
  showFridaysAsRed,
  range
}) => {
  const selectedDateDays = useMemo2(
    () => getDates(selectedDate),
    [selectedDate]
  );
  const shouldShowRangedBackgrounds = useMemo2(
    () => !!(range == null ? void 0 : range.from),
    [range == null ? void 0 : range.from]
  );
  const [hoveredDay, setHoveredDay] = useState2();
  const debouncedHoveredDay = useDebounce(hoveredDay, 50);
  const hoverEnd = useMemo2(
    () => (range == null ? void 0 : range.to) || debouncedHoveredDay,
    [debouncedHoveredDay, range]
  );
  return /* @__PURE__ */ jsxs3(Fragment2, {
    children: [
      /* @__PURE__ */ jsx3("div", {
        className: "grid grid-cols-7 gap-4",
        children: ["\u0634", "\u06CC", "\u062F", "\u0633", "\u0686", "\u067E", "\u062C"].map((day, index) => /* @__PURE__ */ jsx3("h2", {
          style: {
            color: themeClasses.weekDaysTextColor,
            backgroundColor: themeClasses.weekDaysBackgroundColor
          },
          className: classNames3(
            "m-0 text-sm rounded-full p-2 w-9 h-9 text-center border border-transparent"
          ),
          "aria-label": daysOfTheWeek[index],
          title: daysOfTheWeek[index],
          children: day
        }, day))
      }),
      /* @__PURE__ */ jsx3("div", {
        className: "grid grid-cols-7 gap-4",
        children: selectedDateDays.map((day, index) => {
          const isDateInvalid = minDate && isBefore(day, minDate) && !isSameDay(day, minDate) || maxDate && isAfter(day, maxDate) && !isSameDay(day, maxDate) || (disabledDates == null ? void 0 : disabledDates.includes(day));
          const isInRange = (range == null ? void 0 : range.from) ? isDateInRange(range.from, hoverEnd || 0, day) && !isSameDay(day, range.from) : false;
          const isDayActive = isSameDay(day, activeDate) || isSameDay(day, (range == null ? void 0 : range.from) || 0) || isSameDay(day, (range == null ? void 0 : range.to) || 0);
          const textColor = () => {
            if (showFridaysAsRed && isFriday(day))
              return isDayActive ? themeClasses.offDaysSelectedColor : themeClasses.offDaysColor;
            if (isDayActive)
              return themeClasses.daysSelectedColor;
            return themeClasses.daysColor;
          };
          const backgroundColor = (hovered = false) => {
            const { r: r2, g: g2, b: b2 } = hexToRgb(
              themeClasses.daysSelectedBackgroundColor
            );
            if (shouldShowRangedBackgrounds && isInRange && !isDayActive || hovered)
              return `rgba(${r2}, ${g2}, ${b2}, ${(range == null ? void 0 : range.to) ? "0.25" : "0.12"})`;
            return isDayActive ? themeClasses.daysSelectedBackgroundColor : themeClasses.daysBackgroundColor;
          };
          const rounded = () => {
            if (!(range == null ? void 0 : range.to) && (!hoverEnd || isSameDay(activeDate, hoverEnd) || activeDate > hoverEnd))
              return "rounded-full";
            if (isDayActive) {
              if (isSameDay(day, (range == null ? void 0 : range.from) || 0))
                return "rounded-full";
              if (isSameDay(day, (range == null ? void 0 : range.to) || 0))
                return "rounded-full";
            }
            if (isInRange && shouldShowRangedBackgrounds) {
              if (isFriday(day) || isSameDay(day, hoverEnd))
                return "rounded-l-full";
              if (isSaturday(day))
                return "rounded-r-full";
              return "rounded-none";
            }
          };
          const { r, g, b } = hexToRgb(themeClasses.hoverBackgroundColor);
          const hoverColor = {
            "--hover-color": `rgba(${r}, ${g}, ${b}, 0.1)`
          };
          return /* @__PURE__ */ jsxs3("div", {
            className: classNames3(
              "flex items-center justify-center w-9 h-9 relative p-0 m-0",
              rounded()
            ),
            style: {
              backgroundColor: shouldShowRangedBackgrounds ? backgroundColor() : void 0
            },
            children: [
              isInRange && shouldShowRangedBackgrounds && !isSaturday(day) && /* @__PURE__ */ jsx3("div", {
                className: "w-3 absolute translate-x-6 h-full pointer-events-none",
                style: {
                  backgroundColor: shouldShowRangedBackgrounds ? backgroundColor(true) : void 0
                }
              }),
              isSameDay(day, (range == null ? void 0 : range.from) || 0) && hoverEnd > day && /* @__PURE__ */ jsx3("div", {
                className: "absolute w-full -z-10 h-full pointer-events-none rounded-r-full",
                style: {
                  backgroundColor: shouldShowRangedBackgrounds ? backgroundColor(true) : void 0
                }
              }),
              isSameDay(day, (range == null ? void 0 : range.to) || 0) && !isSaturday(day) && /* @__PURE__ */ jsx3("div", {
                className: "absolute w-full -z-10 h-full pointer-events-none rounded-l-full",
                style: {
                  backgroundColor: shouldShowRangedBackgrounds ? backgroundColor(true) : void 0
                }
              }),
              /* @__PURE__ */ jsx3("button", {
                type: "button",
                disabled: isDateInvalid,
                onClick: onActiveDayChange.bind(void 0, day),
                onMouseEnter: () => setHoveredDay(day),
                onMouseLeave: () => setHoveredDay(void 0),
                style: {
                  color: textColor(),
                  backgroundColor: isInRange && shouldShowRangedBackgrounds ? void 0 : backgroundColor(),
                  borderColor: isToday2(day) && highlightToday ? themeClasses.todayBorderColor : "transparent",
                  ...hoverColor
                },
                className: classNames3(
                  "text-sm text-center border w-9 h-9 m-0 rounded-full hover:!bg-[color:var(--hover-color)]",
                  (!isSameMonth(day, selectedDate) || isDateInvalid) && "opacity-50"
                ),
                children: convertDigits2(getDate2(day))
              }, day.toString())
            ]
          });
        })
      })
    ]
  });
};
var MainBody_default = MainBody;

// src/MonthsBody.tsx
import classNames4 from "classnames";
import { getMonth as getMonth2 } from "date-fns-jalali";
import { jsx as jsx4 } from "react/jsx-runtime";
var MonthsBody = ({
  onChangeMonth,
  months,
  themeClasses,
  selectedDate
}) => {
  return /* @__PURE__ */ jsx4("div", {
    className: "grid grid-cols-3 gap-4",
    children: months.map((month, index) => /* @__PURE__ */ jsx4("button", {
      type: "button",
      onClick: () => onChangeMonth(index),
      style: {
        backgroundColor: index === getMonth2(selectedDate) ? themeClasses.daysSelectedBackgroundColor : themeClasses.daysBackgroundColor,
        color: index === getMonth2(selectedDate) ? themeClasses.daysSelectedColor : themeClasses.daysColor
      },
      className: classNames4("px-6 py-4 rounded-full text-center"),
      children: month
    }, month))
  });
};
var MonthsBody_default = MonthsBody;

// src/utils/cloneDate.ts
var cloneDate = (date) => {
  return new Date(date);
};

// src/YearsBody.tsx
import classNames5 from "classnames";
import { getYear } from "date-fns-jalali";
import { convertDigits as convertDigits3 } from "persian-helpers";
import { useCallback, useEffect as useEffect2, useMemo as useMemo3, useRef, useState as useState3 } from "react";
import { jsx as jsx5 } from "react/jsx-runtime";
var YearsBody = ({
  onChangeYear,
  activeDate,
  themeClasses,
  selectedDate
}) => {
  const currentYear = useMemo3(() => getYear(new Date()), []);
  const years = [
    ...[...new Array(100)].map((item, index) => currentYear - (100 - index)),
    ...[...new Array(100)].map((item, index) => currentYear + index)
  ];
  const [domNode, setDomNode] = useState3(null);
  const currentYearRef = useCallback(setDomNode, []);
  useEffect2(() => {
    if (domNode) {
      domNode.scrollIntoView({
        behavior: "smooth",
        block: "center",
        inline: "center"
      });
    }
  }, [domNode]);
  const otherYearsRef = useRef(null);
  return /* @__PURE__ */ jsx5("div", {
    className: "grid grid-cols-3 gap-4 max-h-72 overflow-y-scroll custom-scroll",
    children: years.map((year, index) => /* @__PURE__ */ jsx5("button", {
      type: "button",
      ref: year === getYear(selectedDate) ? currentYearRef : otherYearsRef,
      onClick: () => onChangeYear(year),
      style: {
        backgroundColor: year === getYear(selectedDate) ? themeClasses.daysSelectedBackgroundColor : themeClasses.daysBackgroundColor,
        color: year === getYear(selectedDate) ? themeClasses.daysSelectedColor : themeClasses.daysColor
      },
      className: classNames5("px-6 py-4 rounded-full text-center"),
      children: convertDigits3(year)
    }, year))
  });
};
var YearsBody_default = YearsBody;

// src/Calendar.tsx
import { jsx as jsx6, jsxs as jsxs4 } from "react/jsx-runtime";
var FadeTransition = ({ children, bodyTransition, ...rest }) => {
  const nodeRef = useRef2(null);
  return /* @__PURE__ */ jsx6(Transition, {
    ...rest,
    nodeRef,
    children: (state) => {
      let transitionClass;
      switch (bodyTransition) {
        case "fade":
          transitionClass = { in: "opacity-100", out: "opacity-0" };
          break;
        case "zoomOut":
          transitionClass = {
            in: "opacity-100 scale-100",
            out: "opacity-0 scale-50"
          };
          break;
        default:
        case "zoomIn":
          transitionClass = {
            in: "opacity-100 scale-100",
            out: "opacity-0 scale-110"
          };
          break;
      }
      return /* @__PURE__ */ jsx6("div", {
        ref: nodeRef,
        className: classNames6(
          state === "exiting" || state === "entering" ? "absolute top-0" : "relative",
          state === "entered" ? transitionClass.in : transitionClass.out,
          state === "exited" ? "hidden" : "block",
          "transition-all ease-in-out w-full h-full flex flex-col space-y-4"
        ),
        children
      });
    }
  });
};
var getInitialDate = (defaultActiveDate, propActiveDate, minDate) => {
  if (defaultActiveDate)
    return defaultActiveDate;
  if (propActiveDate)
    return propActiveDate;
  if (minDate) {
    let clonedMin = cloneDate(minDate);
    while (clonedMin <= minDate) {
      clonedMin.setDate(clonedMin.getDate() + 1);
    }
    return clonedMin;
  }
  return new Date();
};
var Calendar = forwardRef(
  ({
    highlightToday = true,
    onChange,
    activeDate: propActiveDate,
    theme = "light",
    showGoToToday = true,
    defaultActiveDate,
    minDate,
    maxDate,
    showFooter = false,
    disabledDates,
    disableTransitions,
    bodyTransition = "zoomIn",
    style,
    showFridaysAsRed = true,
    showTimePicker = true,
    presistTimeOnDateChange = false,
    months = [
      "\u0641\u0631\u0648\u0631\u062F\u06CC\u0646",
      "\u0627\u0631\u062F\u06CC\u0628\u0647\u0634\u062A",
      "\u062E\u0631\u062F\u0627\u062F",
      "\u062A\u06CC\u0631",
      "\u0645\u0631\u062F\u0627\u062F",
      "\u0634\u0647\u0631\u06CC\u0648\u0631",
      "\u0645\u0647\u0631",
      "\u0622\u0628\u0627\u0646",
      "\u0622\u0630\u0631",
      "\u062F\u06CC",
      "\u0628\u0647\u0645\u0646",
      "\u0627\u0633\u0641\u0646\u062F"
    ],
    onCancel,
    onConfirm,
    ranged
  }, ref) => {
    const [activeDate, setActiveDate] = useState4(
      getInitialDate(defaultActiveDate, propActiveDate, minDate)
    );
    const [selectedDate, setSelectedDate] = useState4(activeDate);
    const [activeBody, setActiveBody] = useState4(
      "main"
    );
    const [mode, setMode] = useState4("date");
    const [hour, setHour] = useState4(
      (propActiveDate == null ? void 0 : propActiveDate.getHours()) || (defaultActiveDate == null ? void 0 : defaultActiveDate.getHours()) || 0
    );
    const [minute, setMinute] = useState4(
      (propActiveDate == null ? void 0 : propActiveDate.getMinutes()) || (defaultActiveDate == null ? void 0 : defaultActiveDate.getMinutes()) || 0
    );
    useEffect3(() => {
      if (propActiveDate)
        setActiveDate(activeDate);
    }, [propActiveDate]);
    useEffect3(() => {
      setActiveDate((previousActiveDate) => {
        const previousActiveDateCopy = new Date(previousActiveDate);
        previousActiveDateCopy.setHours(hour, minute, 0, 0);
        return previousActiveDateCopy;
      });
    }, [hour, minute]);
    const switchRef = useRef2(null);
    const updateCurrentRange = (day) => {
      const updateCurrentRangeProperty = (property) => setCurrentRange((previousRange) => ({ ...previousRange, ...property }));
      if (currentRange == null ? void 0 : currentRange.to)
        return setCurrentRange({ from: day });
      if (!(currentRange == null ? void 0 : currentRange.from))
        return updateCurrentRangeProperty({ from: day });
      if (day > currentRange.from)
        return updateCurrentRangeProperty({ to: day });
      updateCurrentRangeProperty({ from: day });
    };
    const activeDayChangeHandler = (day) => {
      const dayCopy = new Date(day);
      if (presistTimeOnDateChange) {
        dayCopy.setHours(hour, minute, 0, 0);
      } else
        dayCopy.setHours(0, 0, 0);
      if (ranged)
        updateCurrentRange(dayCopy);
      setActiveDate(dayCopy);
    };
    const goToTodayHandler = () => {
      activeDayChangeHandler(new Date());
    };
    const nextMonthHandler = () => {
      setSelectedDate((previousDate) => addMonths(previousDate, 1));
    };
    const previousMonthHandler = () => {
      setSelectedDate((previousDate) => subMonths(previousDate, 1));
    };
    const monthChangeHandler = (month) => {
      setSelectedDate((previousDate) => setMonth(previousDate, month));
    };
    const yearChangeHandler = (year) => {
      setSelectedDate((previousDate) => setYear(previousDate, year));
    };
    const cycleThroughBodies = () => {
      if (activeBody === "main")
        return setActiveBody("months");
      if (activeBody === "months")
        return setActiveBody("years");
      return setActiveBody("main");
    };
    const goToPreviousBody = () => {
      if (activeBody === "years")
        return setActiveBody("months");
      setActiveBody("main");
    };
    const [currentRange, setCurrentRange] = useState4(
      ranged === true ? {} : ranged || {}
    );
    useEffect3(() => {
      setSelectedDate(activeDate);
      onChange == null ? void 0 : onChange(activeDate, currentRange == null ? void 0 : currentRange.from);
    }, [activeDate]);
    useEffect3(() => {
      goToPreviousBody();
    }, [selectedDate]);
    const compareMinDate = () => {
      if (!minDate)
        return false;
      const minDateClone = new Date(minDate);
      const now = new Date();
      minDateClone.setHours(0, 0, 0);
      now.setHours(0, 0, 0);
      return now > minDate;
    };
    const themeClasses = useMemo4(() => {
      switch (theme) {
        case "light":
          return {
            hoverBackgroundColor: "#000",
            bodyBackgroundColor: "#fff",
            chevronLeftColor: "#6b7280",
            chevronRightColor: "#6b7280",
            topBarTextColor: "#6b7280",
            weekDaysBackgroundColor: "#f3f4f6",
            weekDaysTextColor: "#9ca3af",
            daysBackgroundColor: "transparent",
            daysSelectedBackgroundColor: "#3b82f6",
            todayBorderColor: "#3b82f6",
            daysSelectedColor: "#fff",
            daysColor: "#000",
            footerBackgroundColor: "#f1f5f9",
            footerButtonColor: "#3b82f6",
            headerBackgroundColor: "#0284c7",
            headerTextColor: "#fff",
            offDaysColor: "#ef4444",
            offDaysSelectedColor: "#fee2e2",
            clock: defaultTimePickerTheme
          };
        case "dark":
          return {
            hoverBackgroundColor: "#ffffff",
            bodyBackgroundColor: "#1c1917",
            chevronLeftColor: "#e7e5e4",
            chevronRightColor: "#e7e5e4",
            topBarTextColor: "#e7e5e4",
            weekDaysBackgroundColor: "#78716c",
            weekDaysTextColor: "#d6d3d1",
            daysBackgroundColor: "transparent",
            daysSelectedBackgroundColor: "#3b82f6",
            todayBorderColor: "#3b82f6",
            daysSelectedColor: "#fff",
            daysColor: "#fff",
            footerBackgroundColor: "#292524",
            footerButtonColor: "#3b82f6",
            headerBackgroundColor: "#0284c7",
            headerTextColor: "#fff",
            offDaysColor: "#ef4444",
            offDaysSelectedColor: "#fee2e2",
            clock: {
              backgroundColor: "#1c1917",
              amPmActiveBackgroundColor: "#3b82f6",
              amPmColor: "#fff",
              clockBackgroundColor: "#000",
              clockLabelsColor: "#fff",
              pointerBackgroundColor: "#38bdf8"
            }
          };
        case "darkRed":
          return {
            hoverBackgroundColor: "#ffffff",
            bodyBackgroundColor: "#1c1917",
            chevronLeftColor: "#e7e5e4",
            chevronRightColor: "#e7e5e4",
            topBarTextColor: "#e7e5e4",
            weekDaysBackgroundColor: "#78716c",
            weekDaysTextColor: "#d6d3d1",
            daysBackgroundColor: "transparent",
            daysSelectedBackgroundColor: "#f43f5e",
            todayBorderColor: "#f43f5e",
            daysSelectedColor: "#fff",
            daysColor: "#fff",
            footerBackgroundColor: "#292524",
            footerButtonColor: "#f43f5e",
            headerBackgroundColor: "#e11d48",
            headerTextColor: "#fff",
            offDaysColor: "#ef4444",
            offDaysSelectedColor: "#fee2e2",
            clock: {
              backgroundColor: "#1c1917",
              amPmActiveBackgroundColor: "#f43f5e",
              amPmColor: "#fff",
              clockBackgroundColor: "#000",
              clockLabelsColor: "#fff",
              pointerBackgroundColor: "#fb7185"
            }
          };
        default:
          return theme;
      }
    }, [theme]);
    useEffect3(() => {
      if (months.length !== 12)
        throw new Error("\u0637\u0648\u0644 \u0622\u0631\u0627\u06CC\u0647 \u0645\u0627\u0647 \u0647\u0627\u06CC \u0648\u0627\u0631\u062F \u0634\u062F\u0647\u060C \u0645\u06CC \u0628\u0627\u06CC\u0633\u062A 12 \u0628\u0627\u0634\u062F.");
    }, [months]);
    const Body = useMemo4(() => {
      return activeBody === "main" ? /* @__PURE__ */ jsx6(MainBody_default, {
        activeDate,
        disabledDates: disabledDates == null ? void 0 : disabledDates.map((disabledDate) => {
          const clonedDate = cloneDate(disabledDate);
          clonedDate.setHours(0, 0, 0);
          return clonedDate;
        }),
        highlightToday,
        maxDate,
        minDate,
        onActiveDayChange: activeDayChangeHandler,
        selectedDate,
        themeClasses,
        showFridaysAsRed,
        range: currentRange
      }) : activeBody === "months" ? /* @__PURE__ */ jsx6(MonthsBody_default, {
        themeClasses,
        onChangeMonth: monthChangeHandler,
        selectedDate,
        months
      }) : /* @__PURE__ */ jsx6(YearsBody_default, {
        themeClasses,
        onChangeYear: yearChangeHandler,
        activeDate,
        selectedDate
      });
    }, [
      activeBody,
      activeDate,
      disabledDates,
      highlightToday,
      maxDate,
      minDate,
      activeDayChangeHandler,
      selectedDate,
      themeClasses
    ]);
    return /* @__PURE__ */ jsxs4("div", {
      ref,
      style: { fontFamily: "Vazirmatn", ...style },
      className: "flex flex-col rounded-md shadow-lg max-w-[22rem] overflow-hidden",
      dir: "rtl",
      children: [
        /* @__PURE__ */ jsx6(Header_default, {
          activeDate,
          selectedDate,
          onGoToToday: goToTodayHandler,
          showGoToToday: minDate ? compareMinDate() : showGoToToday,
          months,
          themeClasses,
          range: ranged ? currentRange : void 0
        }),
        mode === "date" ? /* @__PURE__ */ jsxs4("div", {
          style: { backgroundColor: themeClasses.bodyBackgroundColor },
          className: classNames6("p-4 flex flex-col items-center space-y-6"),
          children: [
            /* @__PURE__ */ jsxs4("div", {
              className: "flex items-center justify-between text-gray-500 w-full",
              children: [
                /* @__PURE__ */ jsx6("button", {
                  type: "button",
                  onClick: previousMonthHandler,
                  style: { color: themeClasses.chevronRightColor },
                  children: /* @__PURE__ */ jsx6(wH, {
                    className: "w-4 h-4"
                  })
                }),
                /* @__PURE__ */ jsxs4("button", {
                  type: "button",
                  className: "text-base",
                  onClick: cycleThroughBodies,
                  style: { color: themeClasses.topBarTextColor },
                  children: [
                    activeBody === "main" && months[getMonth3(selectedDate)],
                    " ",
                    convertDigits4(format2(selectedDate, "yyyy"))
                  ]
                }),
                /* @__PURE__ */ jsx6("button", {
                  type: "button",
                  onClick: nextMonthHandler,
                  style: { color: themeClasses.chevronLeftColor },
                  children: /* @__PURE__ */ jsx6(mH, {
                    className: "w-4 h-4"
                  })
                })
              ]
            }),
            disableTransitions ? Body : /* @__PURE__ */ jsx6("div", {
              className: "relative",
              children: /* @__PURE__ */ jsx6(SwitchTransition, {
                mode: "in-out",
                ref: switchRef,
                children: /* @__PURE__ */ jsx6(FadeTransition, {
                  bodyTransition,
                  timeout: 200,
                  unmountOnExit: true,
                  mountOnEnter: true,
                  children: Body
                }, activeBody)
              })
            })
          ]
        }) : /* @__PURE__ */ jsx6(TimePicker, {
          onChange: (hour2, minute2) => {
            setHour(hour2);
            setMinute(minute2);
            setMode("date");
          },
          theme: themeClasses.clock
        }),
        showFooter && /* @__PURE__ */ jsx6(Footer_default, {
          themeClasses,
          onConfirm: () => onConfirm == null ? void 0 : onConfirm(activeDate, currentRange == null ? void 0 : currentRange.from),
          onCancel,
          showTimePicker,
          mode,
          onChangeMode: setMode
        })
      ]
    });
  }
);
Calendar.displayName = "Calendar";
export {
  Calendar
};
