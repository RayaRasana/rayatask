// src/TimePicker.tsx
import { useDebouncedValue } from "@mantine/hooks";
import classNames2 from "classnames";
import { convertDigits } from "persian-helpers";
import { useEffect, useMemo, useState } from "react";

// src/AmPmButton.tsx
import classNames from "classnames";
import { jsx } from "react/jsx-runtime";
var AmPmButton = ({
  children,
  className,
  ...props
}) => {
  return /* @__PURE__ */ jsx("button", {
    type: "button",
    className: classNames("p-2 text-xs rounded-full", className),
    ...props,
    children
  });
};
var AmPmButton_default = AmPmButton;

// src/TimePicker.tsx
import { Fragment, jsx as jsx2, jsxs } from "react/jsx-runtime";
var hours = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
var minutes = [
  "00",
  "05",
  "10",
  "15",
  "20",
  "25",
  "30",
  "35",
  "40",
  "45",
  "50",
  "55"
];
var getDegrees = (index, items) => {
  return index * 360 / items.length;
};
var defaultTimePickerTheme = {
  backgroundColor: "#fff",
  amPmActiveBackgroundColor: "#93c5fd",
  amPmColor: "#000",
  clockBackgroundColor: "#eff6ff",
  clockLabelsColor: "#000",
  pointerBackgroundColor: "#3b82f6"
};
var TimePicker = ({
  onChange,
  theme = defaultTimePickerTheme
}) => {
  const [currentHoverIndex, setCurrentHoverIndex] = useState();
  const [debouncedCurrentHoverIndex] = useDebouncedValue(currentHoverIndex, 10);
  const [hour, setHour] = useState();
  const [minute, setMinute] = useState();
  const [isAm, setIsAm] = useState(true);
  const currentTimes = useMemo(() => hour ? minutes : hours, [minute, hour]);
  useEffect(() => {
    if (hour !== void 0 && minute !== void 0)
      onChange == null ? void 0 : onChange(hour, minute);
  }, [hour, minute]);
  useEffect(() => {
    if (hour) {
      setHour(
        (previousHour) => previousHour ? isAm ? previousHour - 12 : previousHour + 12 : previousHour
      );
    }
  }, [isAm]);
  return /* @__PURE__ */ jsxs("div", {
    className: "w-full h-full relative",
    style: { backgroundColor: theme.backgroundColor },
    children: [
      /* @__PURE__ */ jsxs("div", {
        className: "w-[18rem] h-[18rem] m-8 shrink-0 relative rounded-full",
        style: { backgroundColor: theme.clockBackgroundColor },
        children: [
          /* @__PURE__ */ jsx2("div", {
            className: "w-2 h-2 absolute top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2 rounded-full",
            style: { backgroundColor: theme.pointerBackgroundColor }
          }),
          debouncedCurrentHoverIndex !== void 0 && /* @__PURE__ */ jsx2(Fragment, {
            children: /* @__PURE__ */ jsx2("div", {
              className: "absolute h-[40%] w-0.5 top-[10%] origin-bottom left-1/2 -translate-x-1/2",
              style: {
                transform: `rotate(${getDegrees(
                  debouncedCurrentHoverIndex,
                  currentTimes
                )}deg)`,
                backgroundColor: theme.pointerBackgroundColor
              }
            })
          }),
          currentTimes.map((time, index) => {
            const degrees = getDegrees(index, currentTimes);
            return /* @__PURE__ */ jsx2("div", {
              className: classNames2(
                "absolute text-center text-lg pointer-events-none",
                debouncedCurrentHoverIndex === index && "text-white"
              ),
              style: {
                transform: `rotate(${degrees}deg)`,
                inset: "10px"
              },
              children: /* @__PURE__ */ jsx2("button", {
                type: "button",
                onMouseEnter: () => setCurrentHoverIndex(index),
                onMouseLeave: () => setCurrentHoverIndex(void 0),
                className: "inline-block w-8 h-8 pointer-events-auto rounded-full",
                style: {
                  transform: `rotate(-${degrees}deg)`,
                  color: debouncedCurrentHoverIndex === index ? "white" : theme.clockLabelsColor,
                  backgroundColor: debouncedCurrentHoverIndex === index ? theme.pointerBackgroundColor : "transparent"
                },
                onClick: () => {
                  if (hour)
                    setMinute(+time);
                  else
                    setHour(+time);
                },
                children: convertDigits(time)
              })
            }, time);
          })
        ]
      }),
      /* @__PURE__ */ jsx2(AmPmButton_default, {
        style: {
          backgroundColor: isAm ? theme.amPmActiveBackgroundColor : "transparent",
          color: theme.amPmColor
        },
        className: "absolute bottom-4 left-4",
        onClick: () => setIsAm(true),
        children: "\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631"
      }),
      /* @__PURE__ */ jsx2(AmPmButton_default, {
        style: {
          backgroundColor: isAm ? "transparent" : theme.amPmActiveBackgroundColor,
          color: theme.amPmColor
        },
        className: "absolute bottom-4 right-4",
        onClick: () => setIsAm(false),
        children: "\u0628\u0639\u062F \u0627\u0632 \u0638\u0647\u0631"
      })
    ]
  });
};
export {
  TimePicker,
  defaultTimePickerTheme
};
