"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSlug = void 0;
var _1 = require(".");
var getDefaultOptions_1 = require("../../getDefaultOptions");
var convert_digits_1 = __importDefault(require("../convert-digits"));
var generateSlug = function (input, optionsParam) {
    var options = (0, getDefaultOptions_1.getDefaultOptions)(optionsParam, _1.slugGeneratorDefaultOptions);
    var to = (options === null || options === void 0 ? void 0 : options.to) || 'en';
    var from;
    switch (options === null || options === void 0 ? void 0 : options.to) {
        case 'fa':
            from = 'en';
            break;
        default:
        case 'en':
            from = 'fa';
            break;
    }
    // This variable converts an input like "Test ۱۲۳" to "Test 123"
    var convertedInput = (0, convert_digits_1.default)(input, {
        to: 'en',
    });
    // And if includeUpperCase is not set to true, we will convert it to
    // Lower case.
    if ((options === null || options === void 0 ? void 0 : options.includeUpperCase) !== true)
        convertedInput = convertedInput.toLowerCase();
    var inputSplit = convertedInput
        .split('')
        // This regex insures that the given input is alphanumeric
        // So that emojis, punctuations, etc are not included.
        .filter(function (letter) { return letter.match(/[a-zA-Z0-9_\s]|[آ-ی]/g); });
    inputSplit.forEach(function (letter, index) {
        // This insures that if the letter is an empty space, it returns.
        if (!letter.length)
            return;
        // Letters is an array of objects containing each letter in
        // Persian/English alphabet.
        // So we will check the "from" language and find it's "to" equivalent
        var convertedLetter = _1.letters.find(function (letterParam) { return letterParam[from] === letter; });
        // If an equivalent is found, it will be replaced.
        // If not, the letter won't change.
        if (convertedLetter)
            inputSplit[index] = convertedLetter[to];
    });
    return (inputSplit
        .join('')
        // Trim is called to avoid extra separators at the end
        .trim()
        .replace(/\s/g, (options === null || options === void 0 ? void 0 : options.separator) || '-'));
};
exports.generateSlug = generateSlug;
