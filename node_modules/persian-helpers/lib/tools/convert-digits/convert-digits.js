"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertDigits = void 0;
var _1 = require(".");
var getDefaultOptions_1 = require("../../getDefaultOptions");
var digits_separator_1 = __importDefault(require("../digits-separator"));
var persianDigits = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];
var stringHandler = function (input, to) {
    var regex;
    switch (to) {
        default:
        case 'fa':
            regex = /\d/g;
            break;
        case 'en':
            regex = /[\u06F0-\u06F90-9]/g;
            break;
    }
    return input.replace(regex, function (index) {
        return to === 'fa'
            ? persianDigits[index]
            : persianDigits.indexOf(index.toString()) >= 0
                ? persianDigits.indexOf(index.toString())
                : index;
    });
};
var numberHandler = function (input, options) {
    var result = input.toLocaleString(options.to);
    var separator = options.separator || '';
    return result.replace(/٬|,/g, separator);
};
var objectHandler = function (input, options) {
    // Remember that null is also an object in JS
    if (input === null)
        return input;
    var output = input;
    // Since arrays are also considered objects, we will check in here
    // And handle each one slightly differently.
    if (Array.isArray(input)) {
        input.forEach(function (value, index) {
            // This calls the main function so that even if the input is a nested array,
            // It would convert every single child.
            output[index] = (0, exports.convertDigits)(value, options);
        });
    }
    else {
        Object.keys(input).forEach(function (key) {
            var value = input[key];
            output[key] = (0, exports.convertDigits)(value, options);
        });
    }
    return output;
};
/**
 * Convert digits in a string | number | array | object to persian | english
 */
var convertDigits = function (input, optionsParam) {
    var options = (0, getDefaultOptions_1.getDefaultOptions)(optionsParam, _1.convertDigitsDefaultOptions);
    // separator = true is just a shorthand for "٬"
    // So therefore, we need to set it here.
    if ((optionsParam === null || optionsParam === void 0 ? void 0 : optionsParam.separator) === true)
        options.separator = _1.defaultSeparator;
    switch (typeof input) {
        case 'string':
            var stringResult = stringHandler(input, options.to);
            if (options.separator)
                return (0, digits_separator_1.default)(stringResult, {
                    separator: options.separator,
                });
            return stringResult;
        case 'number':
            return numberHandler(input, options);
        case 'object':
            return objectHandler(input, options);
        case 'undefined':
        default:
            return input;
    }
};
exports.convertDigits = convertDigits;
